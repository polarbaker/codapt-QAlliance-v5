// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@postgres/app" // hardcoded because it's an internal docker connection
}

// Problem submission model
model ProblemSubmission {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  
  // Step 1: Challenge Details
  title             String
  description       String
  category          String
  
  // Step 2: Requirements
  technicalRequirements String
  constraints       String
  
  // Step 3: Success Criteria
  successCriteria   String
  timeline          String
  budget            String
  
  // Step 4: Contact Information
  name              String
  organization      String
  email             String
  phone             String
  consentToContact  Boolean  @default(false)
  
  // Status
  status            String   @default("pending") // pending, approved, rejected
  
  // Relations
  comments          Comment[]
}

// Comment model for community engagement
model Comment {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  content           String
  author            String
  avatar            String   // CSS class for avatar color
  likes             Int      @default(0)
  
  // Relations
  problemId         Int?
  problem           ProblemSubmission? @relation(fields: [problemId], references: [id])
  
  // For general discussion comments not related to a specific problem
  isGeneralDiscussion Boolean @default(false)
}

// Innovator model for Hall of Innovators
model Innovator {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  
  name              String   @unique
  role              String
  impact            String
  avatar            String   // URL or path to image file
  hasVideo          Boolean  @default(false)
  videoUrl          String?  // URL to video if hasVideo is true
  bio               String?  // Longer biography text
  achievements      String?  // List of achievements as JSON string
  featured          Boolean  @default(false)
  order             Int      @default(0)  // For custom ordering
}

// Impact metrics for data insights
model ImpactMetric {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  
  year              Int
  fundsRaised       Float    // In millions
  startupsScaled    Int
  regionName        String
  regionPercentage  Float    // For pie chart
}

// Newsletter subscriber model
model NewsletterSubscriber {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  email             String   @unique
}

// Contact message model
model ContactMessage {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  name              String
  email             String
  subject           String
  message           String
  status            String   @default("unread") // unread, read, replied
}

// Challenge model for innovation challenges
model Challenge {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  
  title             String
  tagline           String
  category          String   // Climate, Digital, Health, etc.
  region            String   // Africa, Asia, Global, etc.
  status            String   // Active, Submissions Open, Coming Soon
  
  image             String   // URL to image
  description       String   @db.Text
  prize             String
  
  // Timeline
  openDate          DateTime?
  closeDate         DateTime?
  pilotStartDate    DateTime?
  
  // Additional details
  partners          String?  @db.Text // JSON string of partners
  eligibility       String?  @db.Text
  featured          Boolean  @default(false)
  order             Int      @default(0)  // For custom ordering
}

// CaseStudy model for success stories
model CaseStudy {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  
  // Basic info
  title             String
  summary           String
  content           String   @db.Text
  image             String   // URL to image
  
  // Optional fields
  video             String?  // URL to video
  pdfUrl            String?  // URL to PDF
  tags              String   // JSON string of tags
  
  // Impact metrics
  impactMetrics     String?  @db.Text // JSON string of metrics
  
  // Admin controls
  featured          Boolean  @default(false)
  order             Int      @default(0)  // For custom ordering
}

// Partner model for "Our Partners" section
model Partner {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  
  // Basic info
  name              String   @unique
  logoUrl           String
  websiteUrl        String?
  order             Int      @default(0)
  visible           Boolean  @default(true)
  altText           String
}

// News model for news articles
model News {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  
  // Basic info
  title             String
  excerpt           String
  content           String   @db.Text
  category          String
  imageUrl          String?
  author            String?
  tags              String   // JSON string of tags
  
  // Publishing info
  featured          Boolean  @default(false)
  publishedAt       DateTime
  order             Int      @default(0)  // For custom ordering
}

// Enhanced Image model for comprehensive image management
model Image {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  
  // Basic file information
  fileName          String   // Original filename
  filePath          String   @unique // Unique storage path
  fileSize          Int      // File size in bytes
  mimeType          String   // MIME type (image/jpeg, image/png, etc.)
  
  // Image dimensions and metadata
  width             Int?     // Image width in pixels
  height            Int?     // Image height in pixels
  aspectRatio       Float?   // Calculated aspect ratio
  colorSpace        String?  // Color space (sRGB, Adobe RGB, etc.)
  hasAlpha          Boolean  @default(false) // Has transparency
  
  // Processing information
  originalSize      Int?     // Original file size before processing
  compressionRatio  Float?   // Compression ratio achieved
  format            String?  // Output format (webp, jpeg, png)
  quality           Int?     // Compression quality used
  processingInfo    String?  // JSON string with detailed processing information
  
  // Organization and metadata
  title             String?  // User-friendly title
  description       String?  // Image description
  altText           String?  // Alt text for accessibility
  tags              String   @default("[]") // JSON array of tags
  category          String?  // Image category
  
  // Usage tracking
  uploadedBy        String?  // Admin who uploaded
  usageCount        Int      @default(0) // How many times referenced
  lastUsed          DateTime? // Last time image was accessed
  
  // Variants and thumbnails
  variants          ImageVariant[]
  
  // Admin flags
  featured          Boolean  @default(false)
  archived          Boolean  @default(false)
  
  @@index([category])
  @@index([tags])
  @@index([createdAt])
}

// Image variants for different sizes and formats
model ImageVariant {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  
  // Relationship to parent image
  imageId           Int
  image             Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  
  // Variant information
  variantType       String   // thumbnail, small, medium, large, original
  filePath          String   @unique // Storage path for this variant
  width             Int
  height            Int
  fileSize          Int
  format            String   // webp, jpeg, png
  quality           Int?     // Compression quality
  
  @@index([imageId, variantType])
}

// Image collections for organizing related images
model ImageCollection {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  
  name              String   @unique
  description       String?
  slug              String   @unique // URL-friendly identifier
  
  // Collection metadata
  coverImageId      Int?     // Featured image for the collection
  imageCount        Int      @default(0) // Cached count
  totalSize         Int      @default(0) // Total size in bytes
  
  // Organization
  isPublic          Boolean  @default(false)
  order             Int      @default(0)
  
  // Relations
  items             ImageCollectionItem[]
  
  @@index([slug])
  @@index([isPublic])
}

// Junction table for images in collections
model ImageCollectionItem {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  
  collectionId      Int
  collection        ImageCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  
  imageId           Int
  // Note: We'll reference the Image model once it's created
  
  order             Int      @default(0)
  
  @@unique([collectionId, imageId])
  @@index([collectionId, order])
}

// Image processing jobs for async operations
model ImageProcessingJob {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  
  // Job information
  jobType           String   // resize, convert, optimize, generate_variants
  status            String   @default("pending") // pending, processing, completed, failed
  priority          Int      @default(0) // Higher number = higher priority
  
  // Input data
  sourceImageId     Int?     // Source image if applicable
  inputData         String   // JSON with job parameters
  
  // Progress tracking
  progress          Int      @default(0) // 0-100
  statusMessage     String?  // Current status or error message
  
  // Results
  outputData        String?  // JSON with results
  errorMessage      String?  // Error details if failed
  
  // Timing
  startedAt         DateTime?
  completedAt       DateTime?
  
  @@index([status, priority])
  @@index([createdAt])
}

// Site content management for editable images and text content
model SiteContent {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  
  // Content type identifier (can be image or text type)
  contentType       String   @unique
  
  // Image data stored as base64 data URL (for image content)
  imageData         String?  @db.Text
  
  // Text data stored as string (for text content)
  textData          String?  @db.Text
  
  // Original filename for reference (images only)
  fileName          String?
  
  // Optional metadata
  description       String?
  altText           String?
  
  @@index([contentType])
}
